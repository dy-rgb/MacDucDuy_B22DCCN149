from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from bs4 import BeautifulSoup 
import pandas as pd
from functools import reduce

chrome_options = Options()
chrome_options.add_argument("--headless") 
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
url = 'https://fbref.com/en/comps/9/2023-2024/stats/2023-2024-Premier-League-Stats'
driver.get(url)
html = driver.page_source
soup = BeautifulSoup(html, 'lxml')
table1 = soup.find('table', {'id': 'stats_standard'})
table = table1.find('tbody')
product_list = []
if table:
    rows = table.find_all('tr')
    for row in rows:
        name_cell = row.find('td')
        nation_cell = row.find('td', {'data-stat': 'nationality'})
        team_cell=row.find('td',{'data-stat': 'team'})
        postion_cell=row.find('td',{'data-stat': 'position'})
        age_cell=row.find('td',{'data-stat': 'age'})
        mp_cell=row.find('td',{'data-stat': 'games'})
        start_cell=row.find('td',{'data-stat': 'games_starts'})
        minute_cell=row.find('td', {'data-stat': 'minutes'})
        goal_cell=row.find('td',{'data-stat': 'goals'})
        Non_penalyty_goals=row.find('td',{'data-stat': 'goals_assists'})
        PenaltyGoals_cell=row.find('td', {'data-stat': 'goals_pens'})
        assists_cell=row.find('td',{'data-stat': 'assists'})
        yellowcard_cell=row.find('td',{'data-stat': 'cards_yellow'})
        redcard_cell=row.find('td',{'data-stat': 'cards_red'})
        xg_cell=row.find('td',{'data-stat': 'xg'})
        npxg_cell=row.find('td',{'data-stat': 'npxg'})
        xag_cell=row.find('td',{'data-stat': 'xg_assist_per90'})
        PrgC=row.find('td',{'data-stat': 'progressive_carries'})
        PrgP=row.find('td',{'data-stat': 'progressive_passes'})
        PrgR=row.find('td',{'data-stat': 'progressive_passes_received'})
        goal90_cell=row.find('td',{'data-stat': 'goals_per90'})
        assist90_cell=row.find('td',{'data-stat': 'assists_per90'})
        g_a_cell=row.find('td',{'data-stat': 'goals_assists_per90'})
        p_pk_cell=row.find('td',{'data-stat': 'goals_pens_per90'})
        g_a_pk_cell=row.find('td',{'data-stat': 'goals_assists_pens_per90'})
        xg90_cell=row.find('td',{'data-stat': 'xg_per90'})
        xag90_cell=row.find('td',{'data-stat': 'xg_assist_per90'})
        xg_xag90_cell=row.find('td',{'data-stat': 'xg_xg_assist_per90'})
        npxg90_cell=row.find('td',{'data-stat': 'npxg_per90'})
        npxg_xag90_cell=row.find('td',{'data-stat': 'npxg_xg_assist_per90'})
        if name_cell and nation_cell and team_cell:
            name=name_cell.text.strip()
            nation = nation_cell.find('a').get_text(separator=" ", strip=True).split()[-1]
            team=team_cell.text.strip()
            Position=postion_cell.text.strip()
            Age=age_cell.text.strip()
            MP=mp_cell.text.strip()
            start=start_cell.text.strip()
            minute=minute_cell.text.strip()
            goals=goal_cell.text.strip()
            non_penalyty_goals=Non_penalyty_goals.text.strip()
            assists=assists_cell.text.strip()
            goals_pens=PenaltyGoals_cell.text.strip()
            cardyellow=yellowcard_cell.text.strip()
            cardred=redcard_cell.text.strip()
            xg=xg_cell.text.strip()
            npxg=npxg_cell.text.strip()
            xag=xag_cell.text.strip()
            prgc=PrgC.text.strip()
            prgp=PrgP.text.strip()
            prgr=PrgR.text.strip()
            goal90=goal90_cell.text.strip()
            assist90=assist90_cell.text.strip()
            g_a=g_a_cell.text.strip()
            g_pk=g_a_pk_cell.text.strip()
            g_a_pk=g_a_pk_cell.text.strip()
            xg90=xg90_cell.text.strip()
            xag90=xag90_cell.text.strip()
            xg_xag90=xg_xag90_cell.text.strip()
            npxg90=npxg90_cell.text.strip()
            npxg_xag90=npxg_xag90_cell.text.strip()
            product_list.append([name,nation,team,Position,Age,MP,start,minute,non_penalyty_goals,goals,assists,cardyellow,cardred,xg,npxg,xag,prgc,prgp,prgr,goal90,assist90,g_a,g_pk,g_a_pk,xg90,xag90,xg_xag90,npxg90,npxg_xag90])
bang1 = pd.DataFrame(product_list, columns=['Name', 'Nation','Team','Position','Age','Playing time_Matches played','Playing time_Starts','Playing time_Minutes','Performance_non-Penalty Goals','Performance_Penalty Goals','Performance_Assists','Performance_Yellow Cards','Performance_Red Cards','Expected_xG','Expected_npxG','Expected_xAG','Progression_PrgC', 'Progression_PrgP', 'ProgressionPrgR','Per 90 minutes_Gls','Per 90 minutes_Assists','Per 90 minutes_G+A','Per 90 minutes_G-PK', 'Per 90 minutes_G+A-PK','Per 90 minutes_xG','Per 90 minutes_xAG','Per 90 minutes_xG+xAG','Per 90 minutes_npxG','Per 90 minutes_npxG+xAg'])
dataFrame= bang1.drop_duplicates()
#print('Bang 1',dataFrame)
#dataFrame.to_csv('bang1.csv', index=False)

#Tạo bảng 2: Goalkeeping
url1='https://fbref.com/en/comps/9/2023-2024/keepers/2023-2024-Premier-League-Stats'
driver.get(url1)
html = driver.page_source
soup = BeautifulSoup(html, 'lxml')
table1 = soup.find('table', {'id': 'stats_keeper'})
table = table1.find('tbody') 
rows=table.find_all('tr')
listt=[]
for row in rows:
    GA=row.find('td',{'data-stat': 'gk_goals_against'})
    Player=row.find('td',{'data-stat': 'player'})
    Team=row.find('td',{'data-stat': 'team'})
    GA90=row.find('td',{'data-stat': 'gk_goals_against_per90'})
    SOTA=row.find('td',{'data-stat': 'gk_shots_on_target_against'})
    Save=row.find('td',{'data-stat': 'gk_saves'})
    Save1=row.find('td',{'data-stat': 'gk_save_pct'})
    Win=row.find('td',{'data-stat':'gk_wins'})
    D=row.find('td',{'data-stat':'gk_ties'})
    L=row.find('td',{'data-stat': 'gk_losses'})
    CS=row.find('td',{'data-stat': 'gk_clean_sheets'})
    CS1=row.find('td',{'data-stat': 'gk_clean_sheets_pct'})
    PKATT=row.find('td',{'data-stat': 'gk_pens_att'})
    PKA=row.find('td',{'data-stat':'gk_pens_allowed'})
    PKSV=row.find('td',{'data-stat':'gk_pens_saved'})
    PKM=row.find('td',{'data-stat':'gk_pens_missed'})
    SavePCT=row.find('td',{'data-stat': 'gk_pens_save_pct'})
    if GA:
        ga=GA.text.strip()
        team=Team.text.strip()
        ga90=GA90.text.strip()
        player=Player.text.strip()
        soTA=SOTA.text.strip()
        save=Save.text.strip()
        save1=Save1.text.strip()
        win=Win.text.strip()
        d=D.text.strip()
        l=L.text.strip()
        cs=CS.text.strip()
        cs1=CS1.text.strip()
        pkatt=PKATT.text.strip()
        pka=PKA.text.strip()
        pksv=PKSV.text.strip()
        pkm=PKM.text.strip()
        savepct=SavePCT.text.strip()
        listt.append([player,team,ga,ga90,soTA,save,save1,win,d,l,cs,cs1,pkatt,pka,pksv,pkm,savepct])
bang2=pd.DataFrame(listt, columns=['Name','Team','Goalkeeping_Performance_GA','Goalkeeping_Performance_GA90','Goalkeeping_Performance_soTA','Goalkeeping_Performance_SAVE','Goalkeeping_SAVE%','Goalkeeping_Performance_W','Goalkeeping_Performance_D','Goalkeeping_L','Goalkeeping_Performance_CS','Goalkeeping_Performance_CS%','Goalkeeping_Penalty Kicks_PKatt','Goalkeeping_Penalty Kicks_PKA','Goalkeeping_Penalty Kicks_PKsv','Goalkeeping_Penalty Kicks_PKm','Goalkeeping_Penalty Kicks_SAVE%'])
Goalkeeping=bang2.drop_duplicates()
#print('Bang 2',Goalkeeping)
#Goalkeeping.to_csv('bang2.csv', index=False)

#Tạo bảng 3: Shooting
url1='https://fbref.com/en/comps/9/2023-2024/shooting/2023-2024-Premier-League-Stats'
driver.get(url1)
html = driver.page_source
soup = BeautifulSoup(html, 'lxml')
table1 = soup.find('table', {'id': 'stats_shooting'})
table = table1.find('tbody') 
rows=table.find_all('tr')
list2=[]
for row in rows:
    Name=row.find('td',{'data-stat': 'player'})
    Team=row.find('td',{'data-stat': 'team'})
    GLS=row.find('td',{'data-stat': 'goals'})
    SH=row.find('td',{'data-stat': 'shots'})
    SOT=row.find('td',{'data-stat': 'shots_on_target'})
    SOTPCT=row.find('td',{'data-stat': 'shots_on_target_pct'})
    SH90=row.find('td',{'data-stat': 'shots_per90'})
    SOT90=row.find('td',{'data-stat': 'shots_on_target_per90'})
    GSH=row.find('td',{'data-stat': 'goals_per_shot'})
    GSOT=row.find('td',{'data-stat': 'goals_per_shot_on_target'})
    DIST=row.find('td',{'data-stat': 'average_shot_distance'})
    FK=row.find('td',{'data-stat': 'shots_free_kicks'})
    PK=row.find('td',{'data-stat': 'pens_made'})
    PKATT=row.find('td',{'data-stat': 'pens_att'})
    XG=row.find('td',{'data-stat': 'xg'})
    NPXG=row.find('td',{'data-stat': 'npxg'})
    NPXGSH=row.find('td',{'data-stat': 'npxg_per_shot'})
    G_XG=row.find('td',{'data-stat': 'xg_net'})
    NP_G_XG=row.find('td',{'data-stat': 'npxg_net'})
    if Name:
        name=Name.text.strip()
        team=Team.text.strip()
        gls=GLS.text.strip()
        sh=SH.text.strip()
        sot=SOT.text.strip()
        sotpct=SOTPCT.text.strip()
        sh90=SH90.text.strip()
        sot90=SOT90.text.strip()
        gsh=GSH.text.strip()
        gsot=GSOT.text.strip()
        dist=DIST.text.strip()
        fk=FK.text.strip()
        pk=PK.text.strip()
        pkatt=PKATT.text.strip()
        xg=XG.text.strip()
        npxg=NPXG.text.strip()
        npxgsh=NPXGSH.text.strip()
        gxg=G_XG.text.strip()
        npGxg=NP_G_XG.text.strip()
        list2.append([name,team,gls,sh,sot,sotpct,sh90,sot90,gsh,gsot,dist,fk,pk,pkatt,xg,npxg,npxgsh,gxg,npGxg])
bang3=pd.DataFrame(list2, columns=['Name','Team','Shooting_Standard_Gls','Shooting_Standard_Sh','Shooting_Standard_SoT', 'Shooting_Standard_SoT%', 'Shooting_Standard_Sh/90', 'Shooting_Standard_SoT/90', 'Shooting_Standard_G/Sh', 'Shooting_Standard_G/SoT', 'Shooting_Standard_Dist', 'Shooting_Standard_FK', 'Shooting_Standard_PK', 'Shooting_Standard_PKat','Shooting_Expected_xG', 'Shooting_Expected_npxG', 'Shooting_Expected_npxG/Sh', 'Shooting_Expected_G-xG', 'Shooting_Expected_np:G-xG'])
Shooting=bang3.drop_duplicates()
#print('Bang 3',Shooting)
#Shooting.to_csv('bang3.csv', index=False)

#Tạo bảng 4: Passing
url1='https://fbref.com/en/comps/9/2023-2024/passing/2023-2024-Premier-League-Stats'
driver.get(url1)
html = driver.page_source
soup = BeautifulSoup(html, 'lxml')
table1 = soup.find('table', {'id': 'stats_passing'})
table = table1.find('tbody') 
rows=table.find_all('tr')
list3=[]
for row in rows:
    Player=row.find('td',{'data-stat': 'player'})
    Team=row.find('td',{'data-stat': 'team'})
    Cmp=row.find('td',{'data-stat': 'passes_completed'})
    Att=row.find('td',{'data-stat': 'passes'})
    Cmppct=row.find('td',{'data-stat': 'passes_pct'})
    Totdist=row.find('td',{'data-stat': 'passes_total_distance'})
    Prgdis=row.find('td',{'data-stat': 'passes_progressive_distance'})
    SCmp=row.find('td',{'data-stat': 'passes_completed_short'})
    SAtt=row.find('td',{'data-stat': 'passes_short'})
    SCmpoct=row.find('td',{'data-stat': 'passes_pct_short'})
    MCmp=row.find('td',{'data-stat': 'passes_completed_medium'})
    MAtt=row.find('td',{'data-stat': 'passes_medium'})
    MCmppct=row.find('td',{'data-stat': 'passes_pct_medium'})
    LCmp=row.find('td',{'data-stat': 'passes_completed_long'})
    LAtt=row.find('td',{'data-stat': 'passes_long'})
    LCmppct=row.find('td',{'data-stat': 'passes_pct_long'})
    Ast=row.find('td',{'data-stat': 'assists'})
    xAg=row.find('td',{'data-stat': 'xg_assist'})
    XA=row.find('td',{'data-stat': 'pass_xa'})
    xAxAg=row.find('td',{'data-stat': 'xg_assist_net'})
    KP=row.find('td',{'data-stat': 'assisted_shots'})
    Onediv3=row.find('td',{'data-stat': 'passes_into_final_third'})
    PPA=row.find('td',{'data-stat': 'passes_into_penalty_area'})
    CrsPA=row.find('td',{'data-stat': 'crosses_into_penalty_area'})
    PrgP=row.find('td',{'data-stat': 'progressive_passes'})
    if Player:
        team=Team.text.strip()
        name=Player.text.strip()
        cmp=Cmp.text.strip()
        att=Att.text.strip()
        cmppct=Cmppct.text.strip()
        totdist=Totdist.text.strip()
        prgdis=Prgdis.text.strip()
        scmp=SCmp.text.strip()
        satt=SAtt.text.strip()
        scmpoct=SCmpoct.text.strip()
        mcmp=MCmp.text.strip()
        matt=MAtt.text.strip()
        mcmppct=MCmppct.text.strip()
        lcmp=LCmp.text.strip()
        latt=LAtt.text.strip()
        lcmppct=LCmppct.text.strip()
        ast=Ast.text.strip()
        xag=xAg.text.strip()
        xa=XA.text.strip()
        xaxag=xAxAg.text.strip()
        kp=KP.text.strip()
        onediv3=Onediv3.text.strip()
        ppa=PPA.text.strip()
        crapa=CrsPA.text.strip()
        prdp=PrgP.text.strip()
        list3.append([name,team,cmp,att,cmppct,totdist,prgdis,scmp,satt,scmpoct,mcmp,matt,mcmppct,lcmp,latt,lcmppct,ast,xag,xa,xaxag,kp,onediv3,ppa,crapa,prdp])
bang4=pd.DataFrame(list3,columns=['Name','Team','Passing_Total_Cmp', 'Passing_Total_Att', 'Passing_Total_Cmp%', 'Passing_Total_TotDist', 'Passing_Total_PrgDist', 'Passing_Shor_Cmp', 'Passing_Shor_Att', 'Passing_Shor_Cmp%','Passing_Medium_Cmp', 'Passing_Medium_Att', 'Passing_Medium_Cmp%','Passing_Long_Cmp', 'Passing_Long_Att', 'Passing_Long_Cmp%','Passing_Expected_Ast', 'Passing_Expected_xAG', 'Passing_Expected_xA', 'Passing_Expected_A-xAG', 'Passing_Expected_KP', 'Passing_Expected_1/3', 'Passing_Expected_PPA', 'Passing_Expected_CrsPA', 'Passing_Expected_PrgP'])
Passing=bang4.drop_duplicates()
#print('bang 4',Passing)
#Passing.to_csv('bang4.csv', index=False)

#Tạo bảng 5: PassTypes
url1='https://fbref.com/en/comps/9/2023-2024/passing_types/2023-2024-Premier-League-Stats'
driver.get(url1)
html = driver.page_source
soup = BeautifulSoup(html, 'lxml')
table1 = soup.find('table', {'id': 'stats_passing_types'})
table = table1.find('tbody') 
rows=table.find_all('tr')
list4=[]
for row in rows:
    Player=row.find('td',{'data-stat': 'player'})
    Team=row.find('td',{'data-stat': 'team'})
    Live=row.find('td',{'data-stat': 'passes_live'})
    Dead=row.find('td',{'data-stat': 'passes_dead'})
    Fk=row.find('td',{'data-stat': 'passes_free_kicks'})
    TB=row.find('td',{'data-stat': 'through_balls'})
    Sw=row.find('td',{'data-stat': 'passes_switches'})
    Crs=row.find('td',{'data-stat': 'crosses'})
    Ti=row.find('td',{'data-stat': 'throw_ins'})
    CK=row.find('td',{'data-stat': 'corner_kicks'})
    IiN=row.find('td',{'data-stat': 'corner_kicks_in'})
    OoUT=row.find('td',{'data-stat': 'corner_kicks_out'})
    Str=row.find('td',{'data-stat': 'corner_kicks_straight'})
    CcMP=row.find('td',{'data-stat': 'passes_completed'})
    OoFF=row.find('td',{'data-stat': 'passes_offsides'})
    Block=row.find('td',{'data-stat': 'passes_blocked'})
    if Player:
        player=Player.text.strip()
        live=Live.text.strip()
        team=Team.text.strip()
        dead=Dead.text.strip()
        fk=CK.text.strip()
        tb=TB.text.strip()
        sw=Sw.text.strip()
        crs=Crs.text.strip()
        ti=Ti.text.strip()
        ck=CK.text.strip()
        iin=IiN.text.strip()
        oout=OoUT.text.strip()
        str=Str.text.strip()
        ccMP=CcMP.text.strip()
        ooFF=OoFF.text.strip()
        block=Block.text.strip()
        list4.append([player,team,live,dead,fk,tb,sw,crs,ti,ck,iin,oout,str,ccMP,ooFF,block])
bang5 = pd.DataFrame(list4, columns=['Name','Team','Pass Types_Pass Types_Live', 'Pass Types_Pass Types_Dead', 'Pass Types_Pass Types_Pass Types_Pass Types_FK', 'Pass Types_Pass Types_TB', 'Pass Types_Pass Types_Sw', 'Pass Types_Pass Types_Crs', 'Pass Types_Pass Types_TI', 'Pass Types_Pass Types_CK', 'Pass Types_Corner Kicks_In', 'Pass Types_Corner Kicks_Out', 'Pass Types_Corner Kicks_Str', 'Pass Types_Outcomes_Cmp', 'Pass Types_Outcomes_Off', 'Pass Types_Outcomes_Blocks'])
PassTypes=bang5.drop_duplicates()
#print('Bang 5',PassTypes)
#PassTypes.to_csv('bang5.csv', index=False)

#Tạo bảng 6: GoalandShotCreation
url1='https://fbref.com/en/comps/9/2023-2024/gca/2023-2024-Premier-League-Stats'
driver.get(url1)
html = driver.page_source
soup = BeautifulSoup(html, 'lxml')
table1 = soup.find('table', {'id': 'stats_gca'})
table = table1.find('tbody') 
rows=table.find_all('tr')
list5=[]
for row in rows:
    Player=row.find('td',{'data-stat': 'player'}) 
    Team=row.find('td',{'data-stat': 'team'})
    SCA=row.find('td',{'data-stat': 'sca'})
    SCA90=row.find('td',{'data-stat': 'sca_per90'})
    Passlive=row.find('td',{'data-stat': 'sca_passes_live'})
    PassDeal=row.find('td',{'data-stat': 'sca_passes_dead'})
    TO=row.find('td',{'data-stat': 'sca_take_ons'})
    Sh=row.find('td',{'data-stat': 'sca_shots'})
    Fld=row.find('td',{'data-stat': 'sca_fouled'})
    Def=row.find('td',{'data-stat': 'sca_defense'})
    Gca=row.find('td',{'data-stat': 'gca'})
    Gcaper90=row.find('td',{'data-stat': 'gca_per90'})
    Gca_Passlive=row.find('td',{'data-stat': 'gca_passes_live'})
    Gca_PassDeal=row.find('td',{'data-stat': 'gca_passes_dead'})
    GCa_To=row.find('td',{'data-stat': 'gca_take_ons'})
    Gca_sh=row.find('td',{'data-stat': 'gca_shots'})
    Gca_Fld=row.find('td',{'data-stat': 'gca_fouled'})
    Gca_Def=row.find('td',{'data-stat': 'gca_defense'})
    if Player:
        player=Player.text.strip()
        team=Team.text.strip()
        sca=SCA.text.strip()
        sca90=SCA90.text.strip()
        passlive=Passlive.text.strip()
        passDeal=PassDeal.text.strip()
        to=TO.text.strip()
        sh=Sh.text.strip()
        fld=Fld.text.strip()
        deff=Def.text.strip()
        gca=Gca.text.strip()
        gcaper90=Gcaper90.text.strip()
        gca_passlive=Gca_Passlive.text.strip()
        gcapassdead=Gca_PassDeal.text.strip()
        gca_to=GCa_To.text.strip()
        gca_sh=Gca_sh.text.strip()
        gca_Fld=Gca_Fld.text.strip()
        gca_def=Gca_Def.text.strip()
        list5.append([player,team,sca,sca90,passlive,passDeal,to,sh,fld,deff,gca,gcaper90,gca_passlive,gcapassdead,gca_to,gca_sh,gca_Fld,gca_def])
GoalandShotCreation=pd.DataFrame(list5, columns=['Name','Team','Goal and Shot Creation_SCA_SCA', 'Goal and Shot Creation_SCA_SCA90','Goal and Shot Creation_SCA Types_PassLive', 'Goal and Shot Creation_SCA Types_PassDead', 'Goal and Shot Creation_SCA Types_TO', 'Goal and Shot Creation_SCA Types_Sh','Goal and Shot Creation_SCA Types_Fld', 'Goal and Shot Creation_SCA Types_Def','Goal and Shot Creation_GCA_GCA', 'Goal and Shot Creation_GCA_GCA90','Goal and Shot Creation_GCA Types_PassLive', 'Goal and Shot Creation_GCA Types_PassDead', 'Goal and Shot Creation_GCA Types_TO', 'Goal and Shot Creation_GCA Types_Sh', 'Goal and Shot Creation_GCA Types_Fld', 'Goal and Shot Creation_GCA Types_Def'])
#print('Bang 6',GoalandShotCreation)
#GoalandShotCreation.to_csv('bang6.csv', index=False)

#Tạo bảng 7: DefensiveActionspd
url1='https://fbref.com/en/comps/9/2023-2024/defense/2023-2024-Premier-League-Stats'
driver.get(url1)
html = driver.page_source
soup = BeautifulSoup(html, 'lxml')
table1 = soup.find('table', {'id': 'stats_defense'})
table = table1.find('tbody') 
rows=table.find_all('tr')
list6=[]
for row in rows:
    Player=row.find('td',{'data-stat': 'player'})
    Team=row.find('td',{'data-stat': 'team'})
    Tkl=row.find('td',{'data-stat': 'tackles'})
    Tklw=row.find('td',{'data-stat': 'tackles_won'})
    Def3rd=row.find('td',{'data-stat': 'tackles_def_3rd'})
    Mid3rd=row.find('td',{'data-stat': 'tackles_mid_3rd'})
    Att3rd=row.find('td',{'data-stat': 'tackles_att_3rd'})
    Challenges_Tkl=row.find('td',{'data-stat': 'challenge_tackles'})
    Challenges_att=row.find('td',{'data-stat': 'challenges'})
    Challenges_tkl_pct=row.find('td',{'data-stat': 'challenge_tackles_pct'})
    Challenges_lost=row.find('td',{'data-stat': 'challenges_lost'})
    Block=row.find('td',{'data-stat': 'blocks'})
    Block_sh=row.find('td',{'data-stat': 'blocked_shots'})
    Block_pass=row.find('td',{'data-stat': 'blocked_passes'})
    Block_int=row.find('td',{'data-stat': 'interceptions'})
    Tkl_int=row.find('td',{'data-stat': 'tackles_interceptions'})
    Clr=row.find('td',{'data-stat': 'clearances'})
    Err=row.find('td',{'data-stat': 'errors'})
    if Player:
        player=Player.text.strip()
        team=Team.text.strip()
        tkl=Tkl.text.strip()
        tklw=Tklw.text.strip()
        def3rd=Def3rd.text.strip()
        mid3rd=Mid3rd.text.strip()
        att3rd=Att3rd.text.strip()
        challenges_tkl=Challenges_Tkl.text.strip()
        challenges_att=Challenges_att.text.strip()
        challenges_tkl_pct=Challenges_tkl_pct.text.strip()
        challenges_lost=Challenges_lost.text.strip()
        block=Block.text.strip()
        block_sh=Block_sh.text.strip()
        block_pass=Block_pass.text.strip()
        block_int=Block_int.text.strip()
        tkl_int=Tkl_int.text.strip()
        clr=Clr.text.strip()
        err=Err.text.strip()
        list6.append([player,team,tkl,tklw,def3rd,mid3rd,att3rd,challenges_tkl,challenges_att,challenges_tkl_pct,challenges_lost,block,block_sh,block_pass,block_int,tkl_int,clr,err])
DefensiveActionspd=pd.DataFrame(list6,columns=['Name','Team','Defensive Actions_Tackles_Tkl', 'Defensive Actions_Tackles_TklW', 'Defensive Actions_Tackles_Def 3rd', 'Defensive Actions_Tackles_Mid 3rd', 'Defensive Actions_Tackles_Att 3rd','Defensive Actions_Challenges_Tkl', 'Defensive Actions_Challenges_Att', 'Defensive Actions_Challenges_Tkl%', 'Defensive Actions_Challenges_Lost','Defensive Actions_Blocks_Blocks', 'Defensive Actions_Blocks_Sh', 'Defensive Actions_Blocks_Pass', 'Defensive Actions_Blocks_Int', 'Defensive Actions_Blocks_Tkl + Int', 'Defensive Actions_Blocks_Clr', 'Defensive Actions_Blocks_Err'])
#print('Bang 7',DefensiveActionspd)
#DefensiveActionspd.to_csv('bang7.csv', index=False)

#Tạo bảng 8: Possession
url1='https://fbref.com/en/comps/9/2023-2024/possession/2023-2024-Premier-League-Stats'
driver.get(url1)
html = driver.page_source
soup = BeautifulSoup(html, 'lxml')
table1 = soup.find('table', {'id': 'stats_possession'})
table = table1.find('tbody') 
rows=table.find_all('tr')
list7=[]
for row in rows:
    Player=row.find('td',{'data-stat': 'player'})
    Team=row.find('td',{'data-stat': 'team'})
    Touches=row.find('td',{'data-stat': 'touches'})
    Defpen=row.find('td',{'data-stat': 'touches_def_pen_area'})
    Def3rd=row.find('td',{'data-stat': 'touches_def_3rd'})
    Mid3rd=row.find('td',{'data-stat': 'touches_mid_3rd'})
    Att3rd=row.find('td',{'data-stat': 'touches_att_3rd'})
    Attpen=row.find('td',{'data-stat': 'touches_att_pen_area'})
    Live=row.find('td',{'data-stat': 'touches_live_ball'})
    Att=row.find('td',{'data-stat': 'take_ons'})
    Succ=row.find('td',{'data-stat': 'take_ons_won'})
    Succ_pct=row.find('td',{'data-stat': 'take_ons_won_pct'})
    Tkl=row.find('td',{'data-stat': 'take_ons_tackled'})
    Tkl_oct=row.find('td',{'data-stat': 'take_ons_tackled_pct'})
    Carries=row.find('td',{'data-stat': 'carries'})
    Totdist=row.find('td',{'data-stat': 'carries_distance'})
    PrgDist=row.find('td',{'data-stat': 'carries_progressive_distance'})
    PrgC=row.find('td',{'data-stat': 'progressive_carries'})
    Onedive3=row.find('td',{'data-stat': 'carries_into_final_third'})
    CPA=row.find('td',{'data-stat': 'carries_into_penalty_area'})
    Mis=row.find('td',{'data-stat': 'miscontrols'})
    Dis=row.find('td',{'data-stat': 'dispossessed'})
    Rec=row.find('td',{'data-stat': 'passes_received'})
    PrgR=row.find('td',{'data-stat': 'progressive_passes_received'})
    if Player:
        player=Player.text.strip()
        team=Team.text.strip()
        touches=Touches.text.strip()
        defpen=Defpen.text.strip()
        def3rd=Def3rd.text.strip()
        mid3rd=Mid3rd.text.strip()
        att3rd=Att3rd.text.strip()
        attpen=Attpen.text.strip()
        live=Live.text.strip()
        att=Att.text.strip()
        succ=Succ.text.strip()
        succ_pct=Succ_pct.text.strip()
        tkl=Tkl.text.strip()
        tkl_oct=Tkl_oct.text.strip()
        carries=Carries.text.strip()
        totdis=Totdist.text.strip()
        prgdis=PrgDist.text.strip()
        prgc=PrgC.text.strip()
        ondiv3=Onedive3.text.strip()
        cpa=CPA.text.strip()
        mis=Mis.text.strip()
        dis=Dis.text.strip()
        rec=Rec.text.strip()
        prgr=PrgR.text.strip()
        list7.append([player,team,touches,defpen,def3rd,mid3rd,att3rd,attpen,live,att,succ,succ_pct,tkl,tkl_oct,carries,totdis,prgdis,prgc,ondiv3,cpa,mis,dis,rec,prgr])
Possession=pd.DataFrame(list7,columns=['Name','Team','Possession_Touches_Touches', 'Possession_Touches_Def Pen', 'Possession_Touches_Def 3rd', 'Possession_Touches_Mid 3rd', 'Possession_Touches_Att 3rd', 'Possession_Touches_Att Pen', 'Possession_Touches_Live','Possession_Take-Ons_Att', 'Possession_Take-Ons_Succ', 'Possession_Take-Ons_Succ%', 'Possession_Take-Ons_Tkld', 'Possession_Take-Ons_Tkld%','Possession_Carries_Carries', 'Possession_Carries_TotDist', 'Possession_Carries_ProDist', 'Possession_Carries_ProgC', 'Possession_Carries_1/3', 'Possession_Carries_CPA', 'Possession_Carries_Mis', 'Possession_Carries_Dis','Possession_Receiving_Rec', 'Possession_Receiving_PrgR'])
#print('Bang 8',Possession)
#Possession.to_csv('bang8.csv', index=False)

#Tạo bảng 9: Playingtime
url1='https://fbref.com/en/comps/9/2023-2024/playingtime/2023-2024-Premier-League-Stats'
driver.get(url1)
html = driver.page_source
soup = BeautifulSoup(html, 'lxml')
table1 = soup.find('table', {'id': 'stats_playing_time'})
table = table1.find('tbody') 
rows=table.find_all('tr')
list7=[]
for row in rows:
    Player=row.find('td',{'data-stat': 'player'})
    Team=row.find('td',{'data-stat': 'team'})
    Starts=row.find('td',{'data-stat': 'games_starts'})
    MnStarts=row.find('td',{'data-stat': 'minutes_per_start'})
    Compl=row.find('td',{'data-stat': 'games_complete'})
    Subs=row.find('td',{'data-stat': 'games_subs'})
    MnSub=row.find('td',{'data-stat': 'minutes_per_sub'})
    UnSub=row.find('td',{'data-stat': 'unused_subs'})
    PPM=row.find('td',{'data-stat': 'points_per_game'})
    OnG=row.find('td',{'data-stat': 'on_goals_for'})
    OnGa=row.find('td',{'data-stat': 'on_goals_against'})
    Onxg=row.find('td',{'data-stat': 'on_xg_for'})
    Onxga=row.find('td',{'data-stat': 'on_xg_against'})
    if Player:
        player=Player.text.strip()
        team=Team.text.strip()
        starts=Starts.text.strip()
        mnStarts=MnStarts.text.strip()
        compl=Compl.text.strip()
        subs=Subs.text.strip()
        mnsub=MnSub.text.strip()
        unsub=UnSub.text.strip()
        ppm=PPM.text.strip()
        ong=OnG.text.strip()
        onga=OnGa.text.strip()
        onxg=Onxg.text.strip()
        onxga=Onxga.text.strip()
        list7.append([player,team,starts,mnStarts,compl,subs,mnsub,unsub,ppm,ong,onga,onxg,onxga])
Playingtime=pd.DataFrame(list7,columns=['Name','Team','Playing Time_Starts_Starts', 'Playing Time_Starts_Mn/Start', 'Playing Time_Starts_Compl','Playing Time_Subs_Subs','Playing Time_Subs_Mn/Sub', 'Playing Time_Subs_unSub','Playing Time_Team Success_PPM', 'Playing Time_Team Success_onG', 'Playing Time_Team Success_onGA','Playing Time_Team Success xG_onxG', 'Playing Time_Team Success xG_onxGA'])
Playingtime=Playingtime.drop_duplicates(keep='first')
#print('Bang 9',Playingtime)
#Playingtime.to_csv('bang9.csv', index=False)

#Tạo bảng 10: MiscellaneousStats
url1='https://fbref.com/en/comps/9/2023-2024/misc/2023-2024-Premier-League-Stats'
driver.get(url1)
html = driver.page_source
soup = BeautifulSoup(html, 'lxml')
table1 = soup.find('table', {'id': 'stats_misc'})
table = table1.find('tbody') 
rows=table.find_all('tr')
list8=[]
for row in rows:
    Player=row.find('td',{'data-stat': 'player'})
    Team=row.find('td',{'data-stat': 'team'})
    Fls=row.find('td',{'data-stat': 'fouls'})
    Fld=row.find('td',{'data-stat': 'fouled'})
    Off=row.find('td',{'data-stat': 'offsides'})
    Crs=row.find('td',{'data-stat': 'crosses'})
    Og=row.find('td',{'data-stat': 'own_goals'})
    Recov=row.find('td',{'data-stat': 'ball_recoveries'})
    Won=row.find('td',{'data-stat': 'aerials_won'})
    Lost=row.find('td',{'data-stat': 'aerials_lost'})
    Wonpct=row.find('td',{'data-stat': 'aerials_won_pct'})
    if Player:
        player=Player.text.strip()
        team=Team.text.strip()
        fls=Fls.text.strip()
        fld=Fld.text.strip()
        off=Off.text.strip()
        crs=Crs.text.strip()
        og=Og.text.strip()
        recov=Recov.text.strip()
        won=Won.text.strip()
        lost=Lost.text.strip()
        wonpct=Wonpct.text.strip()
        list8.append([player,team,fls,fld,off,crs,og,recov,won,lost,wonpct])
MiscellaneousStats=pd.DataFrame(list8,columns=['Name','Team','Miscellaneous Stats_Performance_Fls', 'Miscellaneous Stats_Performance_Fld', 'Miscellaneous Stats_Performance_Off', 'Miscellaneous Stats_Performance_Crs', 'Miscellaneous Stats_Performance_OG', 'Miscellaneous Stats_Performance_Recov','Miscellaneous Stats_Aerial Duels_Won', 'Miscellaneous Stats_Aerial Duels_Lost', 'Miscellaneous Stats_Aerial Duels_Won%'])
MiscellaneousStats=MiscellaneousStats.drop_duplicates(keep='first')
#print('Bang 10',MiscellaneousStats)
#MiscellaneousStats.to_csv('bang10.csv', index=False)

dataframes = [dataFrame, Goalkeeping,Shooting,Passing,PassTypes,GoalandShotCreation,DefensiveActionspd,Possession,Playingtime,MiscellaneousStats]
merged_df = reduce(lambda left, right: pd.merge(left, right, on=['Name','Team'], how='outer'), dataframes)
merged_df = merged_df.replace(',', '', regex=True)
for col in merged_df.columns:
    if col not in ['Name', 'Team']:
        try:
            merged_df[col] = merged_df[col].astype(float)
        except ValueError:
            pass
merged_df.loc[merged_df['Playing time_Minutes'] <= 1000, 'Playing time_Minutes'] = merged_df['Playing time_Minutes'].astype('Int64')
merged_df = merged_df[merged_df['Playing time_Minutes'] > 90]
merged_df = merged_df.fillna("N/a")
merged_df['First Name'] = merged_df['Name'].apply(lambda x: x.split()[0])
df_sorted = merged_df.sort_values(by=['Name', 'Age'], ascending=[True, False])
df_sorted = df_sorted.drop(columns=['First Name'])
df_sorted.to_csv('results.csv', index=False)
#print(df_sorted)
driver.quit()

# python C:\Users\ADMIN\Bai_tap_lon_D22\Bai1\ThuThapDuLieu.py